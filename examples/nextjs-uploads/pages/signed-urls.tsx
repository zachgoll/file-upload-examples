import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import { useForm } from "react-hook-form";
import axios from "axios";
import { useEffect, useState } from "react";
import useSWR from "swr";
import Link from "next/link";
import { useRouter } from "next/router";
import Nav from "../components/Nav";
import Uppy from "@uppy/core";
import { DashboardModal, useUppy } from "@uppy/react";
import UppyS3 from "@uppy/aws-s3";
import "@uppy/core/dist/style.css";
import "@uppy/dashboard/dist/style.css";

const inter = Inter({ subsets: ["latin"] });

type Fields = {
  uploadFile: FileList;
};

export default function SignedUrls() {
  const router = useRouter();
  const { register, handleSubmit, reset } = useForm<Fields>();

  const [example, setExample] = useState("multer");
  const [isUppy, setIsUppy] = useState(false);
  const [showUppyModal, setShowUppyModal] = useState(false);

  // Will either be /upload-with-multer or /upload-with-busboy
  // No need for full URL, we can do same-origin API requests with relative paths in Next.js
  const endpoint = `/api/upload-with-${example}`;

  const uploadsQuery = useSWR<{ url: string }[]>(
    "s3-files-signed",
    async () => {
      const response = await axios.get("/api/uploads", {
        params: { prefix: "signed-url-uploads" },
      });
      return response.data.uploads;
    }
  );

  const uppy = useUppy(() =>
    new Uppy({ restrictions: { maxNumberOfFiles: 1 } }).use(UppyS3, {
      async getUploadParameters(file) {
        const response = await axios.post("/api/sign-url", {
          mimetype: file.type,
        });

        return {
          method: "PUT",
          url: response.data.url,
        };
      },
    })
  );

  uppy.on("upload-success", () => {
    setShowUppyModal(false);

    // Refetch
    uploadsQuery.mutate();
  });

  return (
    <>
      <Head>
        <title>Basic file uploads</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="p-4 flex flex-col items-center justify-center">
        <Nav />

        <DashboardModal
          open={showUppyModal}
          onRequestClose={() => setShowUppyModal(false)}
          uppy={uppy}
        />

        <div className="w-full max-w-screen-sm mb-4 flex flex-col sm:flex-row justify-between items-center gap-2 bg-slate-50 p-2 rounded">
          <label htmlFor="endpoint-selector" className="font-medium">
            Select uploader UI
          </label>
          <select
            className="border border-slate-200 rounded p-1 text-sm text-sky-600"
            onChange={(e) => setIsUppy(e.target.value === "uppy")}
          >
            <option value="native">Native</option>
            <option value="uppy">Uppy</option>
          </select>
        </div>

        <div className="w-full max-w-screen-sm bg-slate-50 rounded p-4">
          <div className="flex flex-col justify-between gap-2">
            <h2 className="text-xl font-semibold">File uploader form</h2>
            <p className="mb-4">Uploader that uses pre-signed S3 URLs</p>
          </div>
          <hr />

          {isUppy ? (
            <button
              className="mt-4 px-2 py-1 bg-sky-500 hover:bg-sky-400 rounded text-white"
              onClick={() => setShowUppyModal(true)}
            >
              Open Uppy Uploader
            </button>
          ) : (
            <form
              onSubmit={handleSubmit(async (data) => {
                if (!data.uploadFile.length) {
                  throw new Error("Must upload 1 file");
                }

                const file = data.uploadFile[0];

                const signedUrl = await axios.post("/api/sign-url", {
                  mimetype: file.type,
                });

                // Use the pre-signed S3 url to now upload the file
                await axios.put(signedUrl.data.url, file);

                // Invalidate S3 query
                uploadsQuery.mutate();
                reset(); // reset form
              })}
              className="flex flex-col gap-4 max-w-full mt-4"
            >
              <input type="file" {...register("uploadFile")} />
              <button
                type="submit"
                className="px-2 py-1 bg-sky-500 hover:bg-sky-400 rounded text-white"
              >
                Upload
              </button>
            </form>
          )}
        </div>

        <div className="w-full max-w-screen-sm mt-4">
          <h2 className="text-xl font-semibold">Files uploaded to S3</h2>
          <p>
            These are just the S3 object keys to demonstrate they have been
            uploaded
          </p>
          {uploadsQuery.isLoading ? (
            <p>Loading...</p>
          ) : (
            <ul className="mt-4 bg-slate-50 p-2">
              {uploadsQuery.data?.map((upload) => (
                <li key={upload.url} className="list-disc ml-4">
                  <a
                    href={upload.url}
                    download
                    className="underline text-sky-500"
                  >
                    {upload.url}
                  </a>
                </li>
              ))}
            </ul>
          )}
        </div>
      </main>
    </>
  );
}
