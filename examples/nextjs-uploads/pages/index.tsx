import { Inter } from "@next/font/google";
import { useState } from "react";
import { useRouter } from "next/router";
import { useForm } from "react-hook-form";
import Head from "next/head";
import Nav from "../components/Nav";
import axios from "axios";
import useSWR from "swr";

const inter = Inter({ subsets: ["latin"] });

type Fields = {
  uploadFiles: FileList;
};

export default function Home() {
  const router = useRouter();
  const { register, handleSubmit, reset } = useForm<Fields>();

  const [example, setExample] = useState("multer");

  // Will either be /upload-with-multer or /upload-with-busboy
  // No need for full URL, we can do same-origin API requests with relative paths in Next.js
  const endpoint = `/api/upload-with-${example}`;

  const uploadsQuery = useSWR<{ url: string }[]>("s3-files-basic", async () => {
    const response = await axios.get("/api/uploads", {
      params: { prefix: "nextjs-basic-uploads" },
    });
    return response.data.uploads;
  });

  return (
    <>
      <Head>
        <title>Basic file uploads</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="p-4 flex flex-col items-center justify-center">
        <Nav />
        <div className="w-full max-w-screen-sm mb-4 flex flex-col sm:flex-row justify-between items-center gap-2 bg-slate-50 p-2 rounded">
          <label htmlFor="endpoint-selector" className="font-medium">
            Select endpoint
          </label>
          <select
            className="border border-slate-200 rounded p-1 text-sm text-sky-600"
            onChange={(e) => setExample(e.target.value)}
          >
            <option value="multer">/upload-with-multer</option>
            <option value="busboy">/upload-with-busboy</option>
          </select>
        </div>
        <div className="w-full max-w-screen-sm bg-slate-50 rounded p-4">
          <div className="flex flex-col justify-between gap-2">
            <h2 className="text-xl font-semibold">File uploader form</h2>
            <p className="mb-4">
              A basic uploader to demonstrate core file uploading concepts.
            </p>
          </div>
          <hr />
          <form
            onSubmit={handleSubmit(async (data) => {
              const form = new FormData();

              // FileList is an object, but really... it's an array.  See this - https://stackoverflow.com/questions/25333488/why-isnt-the-filelist-object-an-array
              Array.from(data.uploadFiles).forEach((file) => {
                // Very important that every file has the same form field name (multer will read this on the backend)
                form.append("uploadFiles", file);
              });

              // You can use fetch here too - I'm using axios purely out of habit, familiarity, and preference
              await axios.post(endpoint, form);

              // Invalidate S3 query
              uploadsQuery.mutate();
              reset(); // reset form
            })}
            className="flex flex-col gap-4 max-w-full mt-4"
          >
            <input type="file" {...register("uploadFiles")} multiple />
            <button
              type="submit"
              className="px-2 py-1 bg-sky-500 hover:bg-sky-400 rounded text-white"
            >
              Upload
            </button>
          </form>
        </div>

        <div className="w-full max-w-screen-sm mt-4">
          <h2 className="text-xl font-semibold">Files uploaded to S3</h2>
          <p>
            These are just the S3 object keys to demonstrate they have been
            uploaded
          </p>
          {uploadsQuery.isLoading ? (
            <p>Loading...</p>
          ) : (
            <ul className="mt-4 bg-slate-50 p-2">
              {uploadsQuery.data?.map((upload) => (
                <li key={upload.url} className="list-disc ml-4">
                  <a
                    href={upload.url}
                    download
                    className="underline text-sky-500"
                  >
                    {upload.url}
                  </a>
                </li>
              ))}
            </ul>
          )}
        </div>
      </main>
    </>
  );
}
